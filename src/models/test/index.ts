/**
 * Union type representing all possible test types.
 *
 * - `IAlertTest`: Represents an alert-based test, which checks for the presence or absence of specific alerts generated by scan rules.
 * - `IMonitorTest`: Represents a monitor test, which checks if a statistic meets a threshold.
 * - `IStatisticsTest`: Represents a statistics test, which compares a statistic against a value using a specified operator.
 * - `IUrlTest`: Represents a URL test, which checks for the presence of patterns in request/response headers or bodies for a given URL.
 *
 * @typedef {IAlertTest | IMonitorTest | IStatisticsTest | IUrlTest} ITest
 */
/**
 * Allowed actions for alert tests.
 * @typedef {'passIfPresent' | 'passIfAbsent'} AlertAction
 */
export type AlertAction = 'passIfPresent' | 'passIfAbsent'; // Allowed actions for alert tests
/**
 * Allowed confidence levels for alerts.
 * @typedef {'False Positive' | 'Low' | 'Medium' | 'High' | 'Confirmed'} AlertConfidence
 */
export type AlertConfidence = 'False Positive' | 'Low' | 'Medium' | 'High' | 'Confirmed'; // Allowed confidence levels
/**
 * Allowed risk levels for alerts.
 * @typedef {'Informational' | 'Low' | 'Medium' | 'High'} AlertRisk
 */
export type AlertRisk = 'Informational' | 'Low' | 'Medium' | 'High'; // Allowed risk levels
/**
 * Allowed values for onFail actions.
 * @typedef {'warn' | 'error' | 'info'} OnFailType
 */
export type OnFailType = 'warn' | 'error' | 'info'; // Allowed onFail values

/**
 * Interface for alert tests.
 *
 * Example YAML representation:
 * ```yaml
 * - name: 'test one'                       # Name of the test, optional
 *   type: alert                            # Specifies that the test is of type 'alert'
 *   action: passIfPresent                  # String: The condition (presence/absence) of the alert, default: passIfAbsent
 *   scanRuleId: 123                        # Integer: The id of the scanRule which generates the alert, mandatory
 *   alertName: 'SQL Injection'              # String: The name of the alert generated, optional
 *   url: http://www.example.com/path       # String: The url of the request corresponding to the alert generated, optional
 *   method: GET                            # String: The method of the request corresponding to the alert generated, optional
 *   attack: 'SQL Injection Attack'         # String: The actual attack which generated the alert, optional
 *   param: 'username'                      # String: The parameter which was modified to generate the alert, optional
 *   evidence: 'Evidence of SQL injection'  # String: The evidence corresponding to the alert generated, optional
 *   confidence: High                       # String: The confidence of the alert, one of 'False Positive', 'Low', 'Medium', 'High', 'Confirmed', optional
 *   risk: High                             # String: The risk of the alert, one of 'Informational', 'Low', 'Medium', 'High', optional
 *   otherInfo: 'Additional context here'   # String: Additional information corresponding to the alert, optional
 *   onFail: 'info'                        # String: One of 'warn', 'error', 'info', mandatory
 * ```
 *
 * @interface IAlertTest
 * @property {string} [name] - Name of the test, optional.
 * @property {'alert'} type - Specifies that the test is of type 'alert'.
 * @property {AlertAction} [action] - Condition (presence/absence) of the alert, default: passIfAbsent.
 * @property {number} scanRuleId - The id of the scanRule which generates the alert, mandatory.
 * @property {string} [alertName] - The name of the alert generated, optional.
 * @property {string} [url] - The URL of the request corresponding to the alert generated, optional.
 * @property {string} [method] - The method of the request corresponding to the alert generated, optional.
 * @property {string} [attack] - The actual attack which generated the alert, optional.
 * @property {string} [param] - The parameter which was modified to generate the alert, optional.
 * @property {string} [evidence] - The evidence corresponding to the alert generated, optional.
 * @property {AlertConfidence} [confidence] - The confidence of the alert, optional.
 * @property {AlertRisk} [risk] - The risk of the alert, optional.
 * @property {OnFailType} onFail - Action to take on failure, mandatory.
 */
export interface IAlertTest {
  name?: string; // Name of the test, optional
  type: 'alert'; // Specifies that the test is of type 'alert'
  action?: AlertAction; // Condition (presence/absence) of the alert, default: passIfAbsent
  scanRuleId: number; // The id of the scanRule which generates the alert, mandatory
  alertName?: string; // The name of the alert generated, optional
  url?: string; // The url of the request corresponding to the alert generated, optional
  method?: string; // The method of the request corresponding to the alert generated, optional
  attack?: string; // The actual attack which generated the alert, optional
  param?: string; // The parameter which was modified to generate the alert, optional
  evidence?: string; // The evidence corresponding to the alert generated, optional
  confidence?: AlertConfidence; // The confidence of the alert, optional
  risk?: AlertRisk; // The risk of the alert, optional
  onFail: OnFailType; // Action to take on failure, mandatory
}

export class AlertTest implements IAlertTest {
  name?: string; // Name of the test, optional
  type: 'alert'; // Specifies that the test is of type 'alert'
  action?: AlertAction; // Condition (presence/absence) of the alert, default: passIfAbsent
  scanRuleId: number; // The id of the scanRule which generates the alert, mandatory
  alertName?: string; // The name of the alert generated, optional
  url?: string; // The url of the request corresponding to the alert generated, optional
  method?: string; // The method of the request corresponding to the alert generated, optional
  attack?: string; // The actual attack which generated the alert, optional
  param?: string; // The parameter which was modified to generate the alert, optional
  evidence?: string; // The evidence corresponding to the alert generated, optional
  confidence?: AlertConfidence; // The confidence of the alert, optional
  risk?: AlertRisk; // The risk of the alert, optional
  onFail: OnFailType; // Action to take on failure, mandatory

  /**
   * Creates an instance of AlertTest.
   * @param {IAlertTest} options - The configuration options for the alert test.
   * @property {string} [options.name] - Name of the test, optional.
   * @property {AlertAction} [options.action] - Condition (presence/absence) of the alert, default: passIfAbsent.
   * @property {number} options.scanRuleId - The id of the scanRule which generates the alert, mandatory.
   * @property {string} [options.alertName] - The name of the alert generated, optional.
   * @property {string} [options.url] - The URL of the request corresponding to the alert generated, optional.
   * @property {string} [options.method] - The method of the request corresponding to the alert generated, optional.
   * @property {string} [options.attack] - The actual attack which generated the alert, optional.
   * @property {string} [options.param] - The parameter which was modified to generate the alert, optional.
   * @property {string} [options.evidence] - The evidence corresponding to the alert generated, optional.
   * @property {AlertConfidence} [options.confidence] - The confidence of the alert, optional.
   * @property {AlertRisk} [options.risk] - The risk of the alert, optional.
   * @property {OnFailType} options.onFail - Action to take on failure, mandatory.
   * @example
   * const alertTest = new AlertTest({
   *   name: 'test one',
   *   action: 'passIfPresent',
   *   scanRuleId: 123,
   *   alertName: 'SQL Injection',
   *   url: 'http://www.example.com/path',
   *   method: 'GET',
   *   attack: 'SQL Injection Attack',
   *   param: 'username',
   *   evidence: 'Evidence of SQL injection',
   *   confidence: 'High',
   *   risk: 'High',
   *   onFail: 'info'
   * });
   */
  constructor(options: IAlertTest) {
    this.name = options.name;
    this.type = options.type ?? 'alert';
    this.action = options.action ?? 'passIfAbsent';
    this.scanRuleId = options.scanRuleId;
    this.alertName = options.alertName;
    this.url = options.url;
    this.method = options.method;
    this.attack = options.attack;
    this.param = options.param;
    this.evidence = options.evidence;
    this.confidence = options.confidence;
    this.risk = options.risk;
    this.onFail = options.onFail;
  }
}

/**
 * Interface for monitor tests.
 *
 * Example YAML representation:
 * ```yaml
 * - name: 'test one'                      # Name of the test, optional
 *   type: monitor                         # Specifies that the test is of type 'monitor'
 *   statistic: 'stats.addon.something'    # Name of an integer / long statistic
 *   site:                                 # Name of the site for site specific tests, supports vars
 *   threshold: 10                         # The threshold at which a statistic fails
 *   onFail: 'info'                        # String: One of 'warn', 'error', 'info', mandatory
 * ```
 *
 * @interface IMonitorTest
 * @property {string} [name] - Name of the test, optional.
 * @property {'monitor'} type - Specifies that the test is of type 'monitor'.
 * @property {string} statistic - Name of an integer / long statistic.
 * @property {string} [site] - Name of the site for site specific tests, supports vars.
 * @property {number} [threshold] - The threshold at which a statistic fails, optional.
 * @property {OnFailType} onFail - Action to take on failure, mandatory.
 */
export interface IMonitorTest {
  name?: string; // Name of the test, optional
  type: 'monitor'; // Specifies that the test is of type 'monitor'
  statistic: string; // Name of an integer / long statistic
  site?: string; // Name of the site for site specific tests, supports vars
  onFail: OnFailType; // String: One of 'warn', 'error', 'info', mandatory
}

/**
 * Class representing a monitor test.
 * @implements {IMonitorTest}
 * @class MonitorTest
 * @property {string} [name] - Name of the test, optional.
 * @property {'monitor'} type - Specifies that the test is of type 'monitor'.
 * @property {string} statistic - Name of an integer / long statistic.
 * @property {string} [site] - Name of the site for site specific tests, supports vars.
 * @property {OnFailType} onFail - Action to take on failure, mandatory.
 * @example
 * const monitorTest = new MonitorTest({
 *   name: 'test one',
 *   statistic: 'stats.addon.something',
 *   site: 'MySite',
 *   onFail: 'info'
 * });
 */
export class MonitorTest implements IMonitorTest {
  name?: string; // Name of the test, optional
  type: 'monitor'; // Specifies that the test is of type 'monitor'
  statistic: string; // Name of an integer / long statistic
  site?: string; // Name of the site for site specific tests, supports vars
  onFail: OnFailType; // String: One of 'warn', 'error', 'info', mandatory

  /**
   * Creates an instance of MonitorTest.
   * @param {IMonitorTest} options - The configuration options for the monitor test.
   * @property {string} [options.name] - Name of the test, optional.
   * @property {string} options.statistic - Name of an integer / long statistic.
   * @property {string} [options.site] - Name of the site for site specific tests, supports vars.
   * @property {OnFailType} options.onFail - Action to take on failure, mandatory.
   */
  constructor(options: IMonitorTest) {
    this.name = options.name;
    this.type = 'monitor';
    this.statistic = options.statistic;
    this.site = options.site;
    this.onFail = options.onFail;
  }
}

/**
 * Interface for statistics tests.
 *
 * Example YAML representation:
 * ```yaml
 * - name: 'test one'                      # Name of the test, optional
 *   type: stats                           # Specifies that the test is of type 'stats'
 *   statistic: 'stats.addon.something'    # Name of an integer / long statistic
 *   site:                                 # Name of the site for site specific tests, supports vars
 *   operator: '>='                        # One of '==', '!=', '>=', '>', '<', '<='
 *   value: 10                             # Value to compare statistic against
 *   onFail: 'info'                        # String: One of 'warn', 'error', 'info', mandatory
 * ```
 *
 * @interface IStatisticsTest
 * @property {string} [name] - Name of the test, optional.
 * @property {'stats'} type - Specifies that the test is of type 'stats'.
 * @property {string} statistic - Name of an integer / long statistic.
 * @property {string} [site] - Name of the site for site specific tests, supports vars.
 * @property {'==' | '!=' | '>=' | '>' | '<' | '<='} operator - Comparison operator.
 * @property {number} value - Value to compare statistic against.
 * @property {OnFailType} onFail - Action to take on failure, mandatory.
 */
export interface IStatisticsTest {
  name?: string; // Name of the test, optional
  type: 'stats'; // Specifies that the test is of type 'stats'
  statistic: string; // Name of an integer / long statistic
  site?: string; // Name of the site for site specific tests, supports vars
  operator: '==' | '!=' | '>=' | '>' | '<' | '<='; // One of '==', '!=', '>=', '>', '<', '<='
  value: number; // Value to compare statistic against
  onFail: OnFailType; // String: One of 'warn', 'error', 'info', mandatory
}

export class StatisticsTest implements IStatisticsTest {
  name?: string; // Name of the test, optional
  type: 'stats'; // Specifies that the test is of type 'stats'
  statistic: string; // Name of an integer / long statistic
  site?: string; // Name of the site for site specific tests, supports vars
  operator: '==' | '!=' | '>=' | '>' | '<' | '<='; // One of '==', '!=', '>=', '>', '<', '<='
  value: number; // Value to compare statistic against
  onFail: OnFailType; // String: One of 'warn', 'error', 'info', mandatory

  /**
   * Creates an instance of StatisticsTest.
   * @param {IStatisticsTest} options - The configuration options for the statistics test.
   * @property {string} [options.name] - Name of the test, optional.
   * @property {string} options.statistic - Name of an integer / long statistic.
   * @property {string} [options.site] - Name of the site for site specific tests, supports vars.
   * @property {'==' | '!=' | '>=' | '>' | '<' | '<='} options.operator - Comparison operator.
   * @property {number} options.value - Value to compare statistic against.
   * @property {OnFailType} options.onFail - Action to take on failure, mandatory.
   */
  constructor(options: IStatisticsTest) {
    this.name = options.name;
    this.type = 'stats';
    this.statistic = options.statistic;
    this.site = options.site;
    this.operator = options.operator;
    this.value = options.value;
    this.onFail = options.onFail;
  }
}

/**
 * Interface for URL tests.
 *
 * Example YAML representation:
 * ```yaml
 * - name: 'test one'                      # Name of the test, optional
 *   type: url                             # Specifies that the test is of type 'url'
 *   url: http://www.example.com/path      # String: The URL to be tested.
 *   operator: 'and'                       # One of 'and', 'or', default is 'or'
 *   requestHeaderRegex:                   # String: The regular expression to be matched in the request header, optional
 *   requestBodyRegex:                     # String: The regular expression to be matched in the request body, optional
 *   responseHeaderRegex:                  # String: The regular expression to be matched in the response header, optional
 *   responseBodyRegex:                    # String: The regular expression to be matched in the response body, optional
 *   onFail: 'info'                        # String: One of 'warn', 'error', 'info', mandatory
 * ```
 *
 * @interface IUrlTest
 * @property {string} [name] - Name of the test, optional.
 * @property {'url'} type - Specifies that the test is of type 'url'.
 * @property {string} url - The URL to be tested.
 * @property {'and' | 'or'} operator - One of 'and', 'or', default is 'or'.
 * @property {string} [requestHeaderRegex] - The regular expression to be matched in the request header, optional.
 * @property {string} [requestBodyRegex] - The regular expression to be matched in the request body, optional.
 * @property {string} [responseHeaderRegex] - The regular expression to be matched in the response header, optional.
 * @property {string} [responseBodyRegex] - The regular expression to be matched in the response body, optional.
 * @property {OnFailType} onFail - Action to take on failure, mandatory.
 */
export interface IUrlTest {
  name?: string; // Name of the test, optional
  type: 'url'; // Specifies that the test is of type 'url'
  url: string; // The URL to be tested
  operator: 'and' | 'or'; // One of 'and', 'or', default is 'or'
  requestHeaderRegex?: string; // The regular expression to be matched in the request header, optional
  requestBodyRegex?: string; // The regular expression to be matched in the request body, optional
  responseHeaderRegex?: string; // The regular expression to be matched in the response header, optional
  responseBodyRegex?: string; // The regular expression to be matched in the response body, optional
  onFail: OnFailType; // String: One of 'warn', 'error', 'info', mandatory
}

/**
 * Class representing a URL test.
 * @implements {IUrlTest}
 * @class UrlTest
 * @property {string} [name] - Name of the test, optional.
 * @property {'url'} type - Specifies that the test is of type 'url'.
 * @property {string} url - The URL to be tested.
 * @property {'and' | 'or'} operator - One of 'and', 'or', default is 'or'.
 * @property {string} [requestHeaderRegex] - The regular expression to be matched in the request header, optional.
 * @property {string} [requestBodyRegex] - The regular expression to be matched in the request body, optional.
 * @property {string} [responseHeaderRegex] - The regular expression to be matched in the response header, optional.
 * @property {string} [responseBodyRegex] - The regular expression to be matched in the response body, optional.
 * @property {OnFailType} onFail - Action to take on failure, mandatory.
 * @example
 * const urlTest = new UrlTest({
 *   name: 'test one',
 *   url: 'http://www.example.com/path',
 *   operator: 'and',
 *   requestHeaderRegex: 'some-regex',
 *   requestBodyRegex: 'some-regex',
 *   responseHeaderRegex: 'some-regex',
 *   responseBodyRegex: 'some-regex',
 *   onFail: 'error',
 * });
 */
export class UrlTest implements IUrlTest {
  name?: string; // Name of the test, optional
  type: 'url'; // Specifies that the test is of type 'url'
  url: string; // The URL to be tested
  operator: 'and' | 'or'; // One of 'and', 'or', default is 'or'
  requestHeaderRegex?: string; // The regular expression to be matched in the request header, optional
  requestBodyRegex?: string; // The regular expression to be matched in the request body, optional
  responseHeaderRegex?: string; // The regular expression to be matched in the response header, optional
  responseBodyRegex?: string; // The regular expression to be matched in the response body, optional
  onFail: OnFailType; // String: One of 'warn', 'error', 'info', mandatory

  /**
   * Creates an instance of UrlTest.
   * @param {IUrlTest} options - The configuration options  for the URL test.
   * @property {string} [options.name] - Name of the test, optional.
   * @property {string} options.url - The URL to be tested.
   * @property {'and' | 'or'} [options.operator] - One of 'and', 'or', default is 'or'.
   * @property {string} [options.requestHeaderRegex] - The regular expression to be matched in the request header, optional.
   * @property {string} [options.requestBodyRegex] - The regular expression to be matched in the request body, optional.
   * @property {string} [options.responseHeaderRegex] - The regular expression to be matched in the response header, optional.
   * @property {string} [options.responseBodyRegex] - The regular expression to be matched in the response body, optional.
   * @property {OnFailType} options.onFail - Action to take on failure, mandatory.
   * @example
   * const urlTest = new UrlTest({
   *   name: 'test one',
   *   url: 'http://www.example.com/path',
   *   operator: 'and',
   *   requestHeaderRegex: 'some-regex',
   *   requestBodyRegex: 'some-regex',
   *   responseHeaderRegex: 'some-regex',
   *   responseBodyRegex: 'some-regex',
   *   onFail: 'error',
   * });
   */
  constructor(options: IUrlTest) {
    this.name = options.name;
    this.type = 'url';
    this.url = options.url;
    this.operator = options.operator ?? 'or';
    this.requestHeaderRegex = options.requestHeaderRegex;
    this.requestBodyRegex = options.requestBodyRegex;
    this.responseHeaderRegex = options.responseHeaderRegex;
    this.responseBodyRegex = options.responseBodyRegex;
    this.onFail = options.onFail;
  }
}

/**
 * Union type for all test interfaces.
 */
export type ITest = IAlertTest | IMonitorTest | IStatisticsTest | IUrlTest;