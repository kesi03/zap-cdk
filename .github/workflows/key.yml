name: Generate PGP Key

on:
  workflow_dispatch:
    inputs:
      passphrase:
        description: 'Passphrase for the PGP key'
        required: true
        default: ''

jobs:
  generate_key:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install GnuPG
        run: sudo apt-get install -y gnupg2

      - name: Create GPG Configuration
        run: |
          echo "Creating GPG configuration file..."
          echo "passphrase=${{ github.event.inputs.passphrase }}" > gpg.conf
          echo "use-agent" >> gpg.conf
          echo "pinentry-program /usr/bin/pinentry" >> gpg.conf
          echo "GPG configuration file created."

      - name: Generate PGP Key
        id: generate_key
        run: |
          echo "Generating PGP key..."
          NAME="${{ github.actor }}"
          EMAIL="${{ github.actor }}@users.noreply.github.com"  # Correct format for GitHub users
          gpg --batch --passphrase-file gpg.conf --pinentry-mode loopback --quick-generate-key "$NAME <$EMAIL>" default default 0
          echo "PGP key generated."

      - name: Get Key Fingerprint
        id: get_fingerprint
        run: |
          echo "Retrieving key fingerprint..."
          FINGERPRINT=$(gpg --list-keys --with-colons | grep '^pub' | awk -F':' '{print $5}' | head -n 1)
          echo "Key fingerprint: $FINGERPRINT"
          echo "fingerprint=$FINGERPRINT" >> $GITHUB_ENV

      - name: Send Public Key to Ubuntu Keyserver
        run: |
          echo "Sending public key to Ubuntu keyserver..."
          gpg --keyserver hkp://keyserver.ubuntu.com --send-keys ${{ env.fingerprint }}
          echo "Public key sent."

      - name: Export Private Key
        id: export_private_key
        run: |
          echo "Disabling GPG agent..."
          export GPG_AGENT_INFO=""
          echo "Exporting private key..."
          gpg --batch --passphrase-file gpg.conf --pinentry-mode loopback --armor --export-secret-keys ${{ env.fingerprint }} > private_key.asc || echo "Failed to export private key."
          if [ -s private_key.asc ]; then
            echo "Private key exported."
          else
            echo "No private key found to export."
            exit 1
          fi

      - name: Debug Private Key
        run: |
          echo "Displaying contents of private_key.asc for debugging..."
          cat private_key.asc
          echo "Contents displayed."

      - name: Check gh CLI Auth
        run: gh auth status

      - name: Save Private Key as Secret
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Set the GH_TOKEN environment variable
        run: |
          echo "Saving private key as a repository secret..."
          gh secret set MAVEN_GPG_PRIVATE_KEY < private_key.asc
          echo "Private key saved."

      - name: Save Passphrase as Secret
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Set the GH_TOKEN environment variable
        run: |
          echo "Saving passphrase as a repository secret..."
          gh secret set MAVEN_GPG_PRIVATE_KEY_PASSPHRASE "${{ github.event.inputs.passphrase }}"
          echo "Passphrase saved."
